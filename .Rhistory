for (file in list.files(helper_path)) {
filename = file.path(helper_path, file)
source(filename)
}
marginal(dat, fixed_cost_yearly, "year")
for (file in list.files(helper_path)) {
filename = file.path(helper_path, file)
source(filename)
}
marginal(dat, fixed_cost_yearly, "year")
byvar="year"
variable_cost = dat %>% group_by_(byvar) %>%
summarise(variable_cost = sum(variable_cost))
tot_hrs = dat %>% group_by_(byvar) %>% summarise(tot_hrs = sum(tot_hrs))
# calculate total rev by byvar
tot_rev = dat %>% group_by_(byvar) %>% summarise(tot_rev = sum(revenue))
# combine into one data frame
fixed_cost = rep(fixed_cost, nrow(variable_cost))
(fixed_cost = aws_cost + website_cost + domain_cost + email_cost)
fixed_cost = rep(fixed_cost, nrow(variable_cost))
out = cbind(merge(tot_hrs, variable_cost, tot_rev), fixed_cost)
out = cbind(merge(merge(tot_hrs, variable_cost), tot_rev), fixed_cost)
out
row1 = c(14, 0, 0, 0, fixed_cost)
out = rbind(row1, out)
print(out)
for (file in list.files(helper_path)) {
filename = file.path(helper_path, file)
source(filename)
}
(fixed_cost_yearly = aws_cost + website_cost + domain_cost + email_cost)
marginal(dat, fixed_cost_yearly, "year")
7337.4/87.25667
head(dat)
sum(dat$tot_hrs)
(fixed_cost_monthly = fixed_cost_yearly / 12)
marginal(dat, fixed_cost_monthly, "month")
65.09*34+340
(opp_cost_per_hr = wages_forgone / 11.5 / 4 / (11 * 5))
(opp_cost_per_hr = wages_forgone / 11.5 / 4 / (11 * 5))*65.09+340
6847.4/65.09
library(cabaceo)
library(dplyr)
library(tidyr)
# set paths
proj_path = "~/Dropbox/biz/domystatisticshomework/"
data_path = file.path(proj_path, "data.csv")
code_path = file.path(proj_path, "code")
helper_path = file.path(code_path, "helper")
# source helper functions
for (file in list.files(helper_path)) {
filename = file.path(helper_path, file)
source(filename)
}
# read data
dat = read.csv(data_path, header=TRUE, stringsAsFactors=FALSE, na.strings="")
# extract month, day, and year from date
res = mon_day_yr(dat$date)
dat$month = as.numeric(res[[1]])
dat$day = as.numeric(res[[2]])
dat$year = as.numeric(res[[3]])
rm(res)
# replace NA with 0 for numeric vars
numvars = c("bizdev_hrs", "teambuild_hrs", "revenue", "proj_hrs",
"contractor_cost")
for (var in numvars) dat[[var]][is.na(dat[[var]])] = 0
# calculate net income, total hours and variable_cost
wages_forgone = 88000
(opp_cost_per_hr = wages_forgone / 11.5 / 4 / (11 * 5))
dat = dat %>% mutate(net = revenue - contractor_cost,
tot_hrs = bizdev_hrs + teambuild_hrs + proj_hrs,
variable_cost = contractor_cost + opp_cost_per_hr * tot_hrs)
#####################
## profit analysis ##
#####################
# calculate net income by month
net_by_month = dat %>% group_by(month) %>% summarise(net = sum(net)) %>%
arrange(desc(net))
# calculate net income by year
net_by_year = dat %>% group_by(year) %>% summarise(net = sum(net)) %>%
arrange(desc(net))
# calculate revenue by client
rev_by_client = dat %>% group_by(client) %>% summarise(rev = sum(revenue)) %>%
arrange(desc(rev)) %>% na.omit(.)
# calculate revenue by client by year
rev_by_client_year = dat %>% group_by(client, year) %>%
summarise(rev = sum(revenue)) %>% arrange(desc(rev)) %>% na.omit(.)
# calculate revenue by year by client
rev_by_year_client = dat %>% group_by(year, client) %>%
summarise(rev = sum(revenue)) %>% arrange(desc(rev)) %>% na.omit(.)
# print
net_by_month
net_by_year
rev_by_client
rev_by_client_year
rev_by_year_client
#######################
## marginal analysis ##
#######################
# calculate marginal cost by year
(fixed_cost_yearly = aws_cost + website_cost + domain_cost + email_cost)
marginal(dat, fixed_cost_yearly, "year")
library(cabaceo)
library(dplyr)
library(tidyr)
# set paths
proj_path = "~/Dropbox/biz/sell/"
data_path = file.path(proj_path, "data.csv")
code_path = file.path(proj_path, "code")
helper_path = file.path(code_path, "helper")
# source helper functions
for (file in list.files(helper_path)) {
filename = file.path(helper_path, file)
source(filename)
}
dat = read.csv(data_path, header=TRUE, stringsAsFactors=FALSE, na.strings="")
res = mon_day_yr(dat$date)
dat$month = as.numeric(res[[1]])
dat$day = as.numeric(res[[2]])
dat$year = as.numeric(res[[3]])
rm(res)
numvars = c("bizdev_hrs", "teambuild_hrs", "revenue", "merchant_fees",
"contractor_cost")
for (var in numvars) dat[[var]][is.na(dat[[var]])] = 0
# calculate net income, total hours and variable_cost
wages_forgone = 88000
(opp_cost_per_hr = wages_forgone / 11.5 / 4 / (11 * 5))
dat = dat %>% mutate(net = revenue - contractor_cost,
tot_hrs = bizdev_hrs + teambuild_hrs,
variable_cost = merchant_fees + contractor_cost +
opp_cost_per_hr * tot_hrs)
dat
(fixed_cost_yearly = aws_cost + website_cost + domain_cost + email_cost)
marginal(dat, fixed_cost_yearly, "year")
(fixed_cost_monthly = fixed_cost_yearly / 12)
marginal(dat, fixed_cost_monthly, "month")
4000*0.02
library(cabaceo)
library(methods)
library(rvest)
library(XML)
# args = commandArgs(trailingOnly = TRUE)
# filename = args[1]
# set path
proj_path = "~/Projects/102_john"
input_path = file.path(proj_path, "input")
data_path = file.path(input_path, "listing.csv")
helper_path = file.path(proj_path, "code/helper-fn")
output_path = file.path(proj_path, "output")
# source helper functions
for (file in list.files(helper_path))
source(file.path(helper_path, file))
# read data
dat = read.csv(data_path, header=TRUE, stringsAsFactors=FALSE)
dat = unique(dat)
# extract suppliers' names from url
suppliers = strip(dat$url, "http://www.")
suppliers = sapply(strsplit(suppliers, ".com"), function(elt) elt[1])
# retrive, parse and extract
out = lapply(1:nrow(dat),
function(i) {
Sys.sleep(2)
retrieve(dat$url[i], suppliers[i])
})
output = suppressWarnings({do.call("rbind", out)})
output = cbind(dat, output)
# write.csv
filename = paste0("out_", Sys.Date(), ".csv")
write.csv(output, file=file.path(output_path, filename), row.names=F)
Sys.Date()
Sys.Date() - 1
yesterday = Sys.Date() - 1
file_today = paste0("out_", Sys.Date(), ".csv")
file_yesterday = paste0("out_", yesterday, ".csv")
file.today
file_today
dat_today = read.csv(file.path(output_path, file_today), header=T,
stringsAsFactors=F, na.strings="NA")
dat_today
dat_yesterday = read.csv(file.path(output_path, file_yesterday), header=T,
stringsAsFactors=F, na.strings="NA")
dat_today$price != dat_yesterday$price
dat_today[dat_today$price != dat_yesterday$price, ]
na.omit(dat_today)
dat_now = na.omit(dat_today)
nrow(dat_today)
nrow(dat_now)
dat_pre = na.omit(dat_yesterday)
dat = merge(dat_now, dat_pre, by=url)
dat = merge(dat_now, dat_pre, by="url")
head(dat)
with(dat, price.x == price.y)
dat[with(dat, price.x != price.y), ]
diff.prices = dat[with(dat, price.x != price.y), ]
diff.status = dat[with(dat, status.x != status.y), ]
diff.status
names(dat.now)
names(dat_now)
dat_now = na.omit(dat_today)
names(dat_now) = c("url", "price_today", "status_today")
dat_pre = na.omit(dat_yesterday)
names(dat_pre) = c("url", "price_yesterday", "status_yesterday")
dat = merge(dat_now, dat_pre)
diff.status = dat[with(dat, status_today != status_yesterday), ]
diff.status
diff_prices = dat[with(dat, price_today != price_yesterday), ]
# compare status
diff_status = dat[with(dat, status_today != status_yesterday), ]
rbind(diff_prices, diff_status)
write.csv(out, file=file.path(output_path, "changes.csv"), row.names=F)
out
out = rbind(diff_prices, diff_status)
out
write.csv(out, file=file.path(output_path, "changes.csv"), row.names=F)
# read in data
proj_path = "~/Dropbox/biz/bookkeeping/paypal-transactions"
data_path = file.path(proj_path, "raw-data")
out_path = file.path(proj_path, "cleaned-data")
inputs = list.files(data_path)
inputs
# read in data
proj_path = "~/Dropbox/biz/bookkeeping/paypal-transactions"
data_path = file.path(proj_path, "raw-data")
out_path = file.path(proj_path, "cleaned-data")
inputs = list.files(data_path)
for (file in inputs) {
filename = file.path(data_path, file)
dat = read.csv(filename, header=T, stringsAsFactors=F,
na.strings=c(" ", "...", ""))
# subset only the relavent variables
dat = dat[, c(1,4,5,6,10)]
dat = na.omit(dat)
dim(dat)
names(dat)
# check transaction types
(types = unique(dat$Type))
# remove useless transaction types
drop = c("Add Funds from a Bank Account", "Withdraw Funds to Bank Account",
"Update to eCheck Received")
sub = dat[!dat$Type %in% drop,]
dim(sub)
unique(sub$Type)
# drop Type and Status and rename the rest vars
sub$Type = NULL
sub$Status = NULL
names(sub) = c("Date", "Description", "Amount")
# write csv
outfile = paste0("cleaned-", file)
write.csv(sub, file=file.path(out_path, outfile), row.names=F)
}
dat
library(cabaceo)
?mon_day_yr
proj_path = "~/Dropbox/bookkeeping/paypal-transactions"
data_path = file.path(proj_path, "sales-data")
file_path = file.path(data_path, "sales-2015-01.csv")
dat = read.csv(file_path, header=T, stringsAsFactors=F)
proj_path = "~/Dropbox/biz/bookkeeping/paypal-transactions"
data_path = file.path(proj_path, "sales-data")
file_path = file.path(data_path, "sales-2015-01.csv")
dat = read.csv(file_path, header=T, stringsAsFactors=F)
library(dplyr)
library(tidyr)
dat %>% group_by(category)
proj_path = "~/Dropbox/biz/bookkeeping/paypal-transactions"
data_path = file.path(proj_path, "sales-data")
file_path = file.path(data_path, "sales-2015-01.csv")
dat = read.csv(file_path, header=T, stringsAsFactors=F)
# tally up sales, shipping and merchant fees
dat %>% group_by(category)
dat %>% group_by(category) %>% summarise(amount = sum(amount))
library(cabaceo)
library(dplyr)
library(tidyr)
# set paths
proj_path = "~/Dropbox/biz/sell/"
data_path = file.path(proj_path, "data.csv")
code_path = file.path(proj_path, "code")
helper_path = file.path(code_path, "helper")
# source helper functions
for (file in list.files(helper_path)) {
filename = file.path(helper_path, file)
source(filename)
}
# read data
dat = read.csv(data_path, header=TRUE, stringsAsFactors=FALSE, na.strings="")
numvars = c("bizdev_hrs", "teambuild_hrs", "sales", "shipping", "merchant_fees",
"contractor_cost")
for (var in numvars) dat[[var]][is.na(dat[[var]])] = 0
dat = dat %>% mutate(variable_cost = shipping + merchant_fees +
contractor_cost + purchases,
net = sales - variable_cost,
tot_hrs = bizdev_hrs + teambuild_hrs)
net_by_month = dat %>% group_by(month) %>% summarise(net = sum(net)) %>%
arrange(desc(net))
# calculate net income by year
net_by_year = dat %>% group_by(year) %>% summarise(net = sum(net)) %>%
arrange(desc(net))
# print
net_by_month
net_by_year
(fixed_cost_yearly = aws_cost + website_cost + domain_cost + email_cost)
marginal(dat, fixed_cost_yearly, "year")
library(cabaceo)
library(dplyr)
library(tidyr)
# set paths
proj_path = "~/Dropbox/biz/sell/"
data_path = file.path(proj_path, "data.csv")
code_path = file.path(proj_path, "code")
helper_path = file.path(code_path, "helper")
# source helper functions
for (file in list.files(helper_path)) {
filename = file.path(helper_path, file)
source(filename)
}
# read data
dat = read.csv(data_path, header=TRUE, stringsAsFactors=FALSE, na.strings="")
# replace NA with 0 for numeric vars
numvars = c("bizdev_hrs", "teambuild_hrs", "revenue", "shipping", "merchant_fees",
"contractor_cost")
for (var in numvars) dat[[var]][is.na(dat[[var]])] = 0
# calculate net income, total hours and variable_cost
dat = dat %>% mutate(variable_cost = shipping + merchant_fees +
contractor_cost + purchases,
net = revenue - variable_cost,
tot_hrs = bizdev_hrs + teambuild_hrs)
#####################
## profit analysis ##
#####################
# calculate net income by month
net_by_month = dat %>% group_by(month) %>% summarise(net = sum(net)) %>%
arrange(desc(net))
# calculate net income by year
net_by_year = dat %>% group_by(year) %>% summarise(net = sum(net)) %>%
arrange(desc(net))
# print
net_by_month
net_by_year
#######################
## marginal analysis ##
#######################
# calculate marginal cost by year
(fixed_cost_yearly = aws_cost + website_cost + domain_cost + email_cost)
marginal(dat, fixed_cost_yearly, "year")
(fixed_cost_monthly = fixed_cost_yearly / 12)
marginal(dat, fixed_cost_monthly, "month")
library(cabaceo)
library(dplyr)
library(tidyr)
# set paths
proj_path = "~/Dropbox/biz/sell/"
data_path = file.path(proj_path, "data.csv")
code_path = file.path(proj_path, "code")
helper_path = file.path(code_path, "helper")
# source helper functions
for (file in list.files(helper_path)) {
filename = file.path(helper_path, file)
source(filename)
}
# read data
dat = read.csv(data_path, header=TRUE, stringsAsFactors=FALSE, na.strings="")
head(dat)
numvars = c("bizdev_hrs", "teambuild_hrs", "revenue", "shipping", "merchant_fees",
"contractor_cost")
for (var in numvars) dat[[var]][is.na(dat[[var]])] = 0
head(dat)
numvars = c("bizdev_hrs", "teambuild_hrs", "revenue", "shipping", "merchant_fees",
"contractor_cost", "purchases")
for (var in numvars) dat[[var]][is.na(dat[[var]])] = 0
dat = dat %>% mutate(variable_cost = shipping + merchant_fees +
contractor_cost + purchases,
net = revenue - variable_cost,
tot_hrs = bizdev_hrs + teambuild_hrs)
net_by_month = dat %>% group_by(month) %>% summarise(net = sum(net)) %>%
arrange(desc(net))
# calculate net income by year
net_by_year = dat %>% group_by(year) %>% summarise(net = sum(net)) %>%
arrange(desc(net))
# print
net_by_month
net_by_year
(fixed_cost_yearly = aws_cost + website_cost + domain_cost + email_cost)
marginal(dat, fixed_cost_yearly, "year")
library(cabaceo)
library(dplyr)
library(tidyr)
# set paths
proj_path = "~/Dropbox/biz/sell/"
data_path = file.path(proj_path, "data.csv")
code_path = file.path(proj_path, "code")
helper_path = file.path(code_path, "helper")
# source helper functions
for (file in list.files(helper_path)) {
filename = file.path(helper_path, file)
source(filename)
}
# read data
dat = read.csv(data_path, header=TRUE, stringsAsFactors=FALSE, na.strings="")
# replace NA with 0 for numeric vars
numvars = c("bizdev_hrs", "teambuild_hrs", "revenue", "shipping", "merchant_fees",
"contractor_cost", "purchases")
for (var in numvars) dat[[var]][is.na(dat[[var]])] = 0
# calculate net income, total hours and variable_cost
dat = dat %>% mutate(variable_cost = shipping + merchant_fees +
contractor_cost + purchases,
net = revenue - variable_cost,
tot_hrs = bizdev_hrs + teambuild_hrs)
#####################
## profit analysis ##
#####################
# calculate net income by month
net_by_month = dat %>% group_by(month) %>% summarise(net = sum(net)) %>%
arrange(desc(net))
# calculate net income by year
net_by_year = dat %>% group_by(year) %>% summarise(net = sum(net)) %>%
arrange(desc(net))
# print
net_by_month
net_by_year
#######################
## marginal analysis ##
#######################
# calculate marginal cost by year
(fixed_cost_yearly = aws_cost + website_cost + domain_cost + email_cost)
marginal(dat, fixed_cost_yearly, "year")
# calculate marginal cost by month
(fixed_cost_monthly = fixed_cost_yearly / 12)
marginal(dat, fixed_cost_monthly, "month")
library(cabaceo)
library(dplyr)
library(tidyr)
# set paths
proj_path = "~/Dropbox/biz/sell/"
data_path = file.path(proj_path, "data.csv")
code_path = file.path(proj_path, "code")
helper_path = file.path(code_path, "helper")
# source helper functions
for (file in list.files(helper_path)) {
filename = file.path(helper_path, file)
source(filename)
}
# read data
dat = read.csv(data_path, header=TRUE, stringsAsFactors=FALSE, na.strings="")
# replace NA with 0 for numeric vars
numvars = c("bizdev_hrs", "teambuild_hrs", "revenue", "shipping", "merchant_fees",
"contractor_cost", "purchases")
for (var in numvars) dat[[var]][is.na(dat[[var]])] = 0
# calculate net income, total hours and variable_cost
dat = dat %>% mutate(variable_cost = shipping + merchant_fees +
contractor_cost + purchases,
net = revenue - variable_cost,
tot_hrs = bizdev_hrs + teambuild_hrs)
#####################
## profit analysis ##
#####################
# calculate net income by month
net_by_month = dat %>% group_by(month) %>% summarise(net = sum(net)) %>%
arrange(desc(net))
# calculate net income by year
net_by_year = dat %>% group_by(year) %>% summarise(net = sum(net)) %>%
arrange(desc(net))
# print
net_by_month
net_by_year
#######################
## marginal analysis ##
#######################
# calculate marginal cost by year
(fixed_cost_yearly = aws_cost + website_cost + domain_cost + email_cost)
marginal(dat, fixed_cost_yearly, "year")
# calculate marginal cost by month
(fixed_cost_monthly = fixed_cost_yearly / 12)
marginal(dat, fixed_cost_monthly, "month")
library(cabaceo)
library(dplyr)
library(tidyr)
# set paths
proj_path = "~/Dropbox/biz/cabaceo/"
data_path = file.path(proj_path, "data.csv")
code_path = file.path(proj_path, "code")
helper_path = file.path(code_path, "helper")
# source helper functions
for (file in list.files(helper_path)) {
filename = file.path(helper_path, file)
source(filename)
}
# read data
dat = read.csv(data_path, header=TRUE, stringsAsFactors=FALSE, na.strings="")
# extract month, day, and year from date
res = mon_day_yr(dat$date)
dat$month = as.numeric(res[[1]])
dat$day = as.numeric(res[[2]])
dat$year = as.numeric(res[[3]])
rm(res)
# replace NA with 0 for numeric vars
numvars = c("bizdev_hrs", "teambuild_hrs", "revenue", "proj_hrs",
"contractor_cost")
for (var in numvars) dat[[var]][is.na(dat[[var]])] = 0
# calculate net income, total hours and variable_cost
wages_forgone = 88000
(opp_cost_per_hr = wages_forgone / 11.5 / 4 / (11 * 5))
dat = dat %>% mutate(net = revenue - contractor_cost,
tot_hrs = bizdev_hrs + teambuild_hrs + proj_hrs,
variable_cost = contractor_cost + opp_cost_per_hr * tot_hrs)
# calculate marginal cost by year
(fixed_cost_yearly = aws_cost + website_cost + domain_cost + email_cost)
marginal(dat, fixed_cost_yearly, "year")
84.08985-38.67916
84.08985-45.72722
(fixed_cost_monthly = fixed_cost_yearly / 12)
marginal(dat, fixed_cost_monthly, "month")
